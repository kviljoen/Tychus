/*
 * -------------------------------------------------
 *  UCT-Tychus Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

manifest {
  homePage = 'https://github.com/kviljoen/Tychus'
  description = 'Tool for the assembly, annotation, and phylogenetic inference of a large number of bacterial genomes'
  version = '1.0'
}

// Some help with time stamps
import java.text.SimpleDateFormat

// Global default params for alignment and assembly modules
params { 
	//Global params
	email = false
	plaintext_email = false
	name = false
	help = false
	read_pairs = "$baseDir/tutorial/raw_sequence_data/*_R{1,2}_001.fq.gz"
	threads = 1
	work_dir = "$baseDir/temporary_files"
	timestamp = new SimpleDateFormat("yyyy-MM-dd").format(new java.util.Date())
	
	// Trimmomatic configuration variables (applicable to both alignment and assembly modules)
	leading = 3
	trailing = 3
	slidingwindow = "4:15"
	minlen = 36
	adapters = "$baseDir/assets/adapters.fa"
	saveTrimmed = false
	
	//Alignment module-specific params
	alignment_output = "tychus_alignment_output"
	alignment_out_dir = "$baseDir/" + alignment_output
	//genome = "$baseDir/tutorial/reference/EcoliK-12MG1655.fa"
	
	//freebayes params
	min_alt_count = 2 
	// kSNP3 configuration variables (alignment module)
	ML = ""
	NJ = ""
	min_frac = 0.75
	user_genome_paths = false
	draft = false
	// Figtree configuration variables (alignment module)
	PNG = ""
	JPEG = ""
	PDF = ""
	SVG = ""
	
	//Assembly module-specific params
	assembly_output = "tychus_assembly_output"
	assembly_out_dir = "$baseDir/" + assembly_output
	// Prokka configuration variables (assembly module)
	genus = ""
	species = ""
	

}

profiles {

	alignment {
		includeConfig 'conf/ilifu_alignment.config'
    		includeConfig 'conf/alignment_base.config'
		  env {
			TRIMMOMATIC='/opt/Trimmomatic-0.36' //KL specify Trimmomatic location in singularity image
			KSNP3='/usr/local/kSNP3'
			FIGTREE='/opt/FigTree_v1.4.4/lib'
			}

	}

	assembly {
		includeConfig 'conf/ilifu_assembly.config'
    		includeConfig 'conf/assembly_base.config'
		
	}
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
