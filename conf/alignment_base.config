/*
 * -------------------------------------------------
 *  Config file specifying buest guess memory requirements 
 *  for Tychus alignment module
 * -------------------------------------------------
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withName:BuildGenomeIndex {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
	
  withName:RunQC {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:BuildAMRIndex {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:AMRAlignment {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:AMRResistome {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:BuildVFIndex {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:VFAlignment {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:VFResistome {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:BuildPlasmidIndex {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  
  withName:PlasmidAlignment {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:PlasmidResistome {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:GenomeAlignment {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:BuildConsensusSequence {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:kSNPDraftAndGenomeConfiguration {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
   withName:kSNPDraftAndExtraReferenceConfiguration {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
   withName:kSNPExtraReferenceConfiguration {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:kSNPGenomeConfiguration {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  
  withName:BuildPhylogenies {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 25.h * task.attempt, 'time' ) }
  }
  
  withName:ConvertNewickToPDF {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
}
  
    params {
  // Defaults only, expecting to be overwritten
     max_memory = 128.GB
     max_cpus = 16
     max_time = 240.h
    }
